 (*
   Sample handshake protocol (typed version)
 *)

type pkey.	(* public key *)
type skey.	(* private key *)
type keymat.	(* key material *)
type result.	(* result of check signature *)

free c:channel.			(* the public channel *)
free s1:bitstring [private]. 	(* the secret *)
free s2:bitstring [private].

(* Public-key Encryption *)
fun penc(bitstring, pkey): bitstring.
fun pk(keymat): pkey.
fun sk(keymat): skey.
reduc forall x:bitstring, y:keymat; pdec(penc(x,pk(y)),sk(y)) = x.

(* Signatures *)
fun ok():result.
fun sign(bitstring, skey): bitstring.
reduc forall m:bitstring, y:keymat; getmess(sign(m,sk(y))) = m.
reduc forall m:bitstring, y:keymat; checksign(sign(m,sk(y)), pk(y)) = ok().

(* Shared-key cryptography *)
fun senc(bitstring, bitstring): bitstring.
reduc forall x: bitstring, y: bitstring; sdec(senc(x,y),y) = x.


(* Test whether s is secret *)
query attacker(s1).
query attacker(s2).

(* Test reachability *)
event endA().
event endB().
query event(endA()).
query event(endB()).

(* Test authentication *)
event bA(pkey,pkey,bitstring,bitstring).
event eB(pkey,pkey,bitstring,bitstring).
query x:pkey,y:pkey,z:bitstring,n:bitstring; inj-event(eB(x,y,z,n)) ==> inj-event(bA(x,y,z,n)).

(* Test integrity *)
event eA(bitstring).
event bB(bitstring).
query sec:bitstring; inj-event(eA(sec)) ==> inj-event(bB(sec)). (*when A receives B has already sent [2nd event ==> 1st event] *)


(* The process *)

let pA(kpA: keymat, pkB: pkey,sec:bitstring) =
         new shared_key:bitstring;
         in (c,nonce:bitstring);
	       event bA(pk(kpA),pkB,shared_key,nonce);
         out(c, penc(sign((shared_key,nonce), sk(kpA)), pkB));
 	       in(c,enc_sec:bitstring);
         let sec=sdec(enc_sec, shared_key) in 
         event eA(sec);
         event endA(); 0. 

let pB(kpB: keymat, pkA: pkey, sec:bitstring) =
         new nonce:bitstring;
         out(c,nonce);
         in(c, enc_nshkey:bitstring); 
         let sig_nshkey=pdec(enc_nshkey, sk(kpB)) in
         if checksign(sig_nshkey, pkA)=ok() then
         let nshkey=getmess(sig_nshkey) in
         let (shared_key:bitstring,=nonce)=nshkey in 
	       event eB(pkA,pk(kpB),shared_key,nonce); 
         event bB(s1);
         out(c, senc(s1, shared_key)); 
         
	       event endB(); 0. 

process
  new kpA:keymat; new kpB:keymat;
  (!out(c, pk(kpA)); 0 | !out(c, pk(kpB)); 0 |
   !pA(kpA, pk(kpB), s1) | !pB(kpB, pk(kpA), s1) |
   !pA(kpA, pk(kpB), s2) | !pB(kpB, pk(kpA), s2)
  )


(* EXPECTPV
Query not attacker(s[]) is true.
Query not event(endA) is false.
Query not event(endB) is false.
Query inj-event(eB(x_1,y_1,z)) ==> inj-event(bA(x_1,y_1,z)) is false.
END *)
